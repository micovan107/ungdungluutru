import { auth, provider, signInWithPopup, onAuthStateChanged, signOut } from './firebase-config.js';

// L∆∞u tr·ªØ t√†i li·ªáu trong LocalStorage
let documents = [];

// T·∫£i d·ªØ li·ªáu t·ª´ localStorage
function loadDocuments() {
    documents = JSON.parse(localStorage.getItem('documents')) || [];
    renderDocuments();
}

// X·ª≠ l√Ω ƒëƒÉng nh·∫≠p v·ªõi Google
async function handleGoogleSignIn() {
    try {
        await signInWithPopup(auth, provider);
    } catch (error) {
        console.error('L·ªói ƒëƒÉng nh·∫≠p:', error);
    }
}

// Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
onAuthStateChanged(auth, (user) => {
    if (user) {
        document.getElementById('landing-page').style.display = 'none';
        document.getElementById('app').style.display = 'block';
        document.getElementById('userAvatar').src = user.photoURL || 'https://via.placeholder.com/32';
        loadDocuments();
    } else {
        document.getElementById('landing-page').style.display = 'block';
        document.getElementById('app').style.display = 'none';
    }
});

// X·ª≠ l√Ω ƒëƒÉng nh·∫≠p Google
document.getElementById('googleSignInBtn').addEventListener('click', handleGoogleSignIn);

// X·ª≠ l√Ω ƒëƒÉng xu·∫•t
document.getElementById('logoutBtn').addEventListener('click', async () => {
    try {
        await signOut(auth);
    } catch (error) {
        console.error('L·ªói ƒëƒÉng xu·∫•t:', error);
    }
});


// C√°c ph·∫ßn t·ª≠ DOM
const uploadBtn = document.getElementById('uploadBtn');
const fileInput = document.getElementById('fileInput');
const documentList = document.getElementById('documentList');

// S·ª± ki·ªán click n√∫t t·∫£i l√™n
uploadBtn.addEventListener('click', () => {
    fileInput.click();
});

// H√†m chuy·ªÉn ƒë·ªïi ·∫£nh sang PDF
async function convertImageToPdf(imageFile) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = async (event) => {
            try {
                const img = new Image();
                img.src = event.target.result;
                
                await new Promise(resolve => img.onload = resolve);
                
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
                
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF({
                    orientation: img.width > img.height ? 'l' : 'p',
                    unit: 'px',
                    format: [img.width, img.height]
                });
                
                pdf.addImage(canvas.toDataURL('image/jpeg'), 'JPEG', 0, 0, img.width, img.height);
                const pdfData = pdf.output('datauristring');
                resolve(pdfData);
            } catch (error) {
                reject(error);
            }
        };
        reader.onerror = reject;
        reader.readAsDataURL(imageFile);
    });
}

// X·ª≠ l√Ω khi ch·ªçn file
fileInput.addEventListener('change', async (e) => {
    const files = Array.from(e.target.files);
    
    for (const file of files) {
        try {
            let content;
            let type = file.type;
            let name = file.name;
            
            if (file.type.startsWith('image/')) {
                content = await convertImageToPdf(file);
                type = 'application/pdf';
                name = name.replace(/\.[^\.]+$/, '.pdf');
            } else {
                const reader = new FileReader();
                content = await new Promise((resolve, reject) => {
                    reader.onload = (event) => resolve(event.target.result);
                    reader.onerror = reject;
                    reader.readAsDataURL(file);
                });
            }
            
            const document = {
                id: Date.now() + Math.random(),
                name: name,
                type: type,
                size: file.size,
                content: content,
                uploadDate: new Date().toLocaleString()
            };
            
            documents.push(document);
            localStorage.setItem('documents', JSON.stringify(documents));
            renderDocuments();
        } catch (error) {
            console.error('L·ªói khi x·ª≠ l√Ω file:', error);
            alert(`Kh√¥ng th·ªÉ x·ª≠ l√Ω file ${file.name}. Vui l√≤ng th·ª≠ l·∫°i.`);
        }
    }
    
    fileInput.value = '';
});

// Hi·ªÉn th·ªã danh s√°ch t√†i li·ªáu
import { documentViewer } from './modal.js';

// Xem t√†i li·ªáu
window.viewDocument = function(docId) {
    const doc = documents.find(d => d.id === docId);
    if (doc) {
        try {
            // Ki·ªÉm tra n·∫øu n·ªôi dung l√† base64
            if (doc.content.startsWith('data:')) {
                const [header, base64Data] = doc.content.split(',');
                const mimeString = header.split(':')[1].split(';')[0];
                const byteString = atob(base64Data);
                const ab = new ArrayBuffer(byteString.length);
                const ia = new Uint8Array(ab);
                for (let i = 0; i < byteString.length; i++) {
                    ia[i] = byteString.charCodeAt(i);
                }
                const blob = new Blob([ab], {type: mimeString});
                const file = new File([blob], doc.name, {type: mimeString});
                documentViewer.viewDocument(file);
            } else {
                // X·ª≠ l√Ω n·ªôi dung vƒÉn b·∫£n th√¥ng th∆∞·ªùng
                const blob = new Blob([doc.content], {type: 'text/html'});
                const file = new File([blob], doc.name, {type: 'text/html'});
                documentViewer.viewDocument(file);
            }
        } catch (error) {
            console.error('L·ªói khi x·ª≠ l√Ω t√†i li·ªáu:', error);
            alert('Kh√¥ng th·ªÉ m·ªü t√†i li·ªáu n√†y. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng t√†i li·ªáu.');
        }
    }
}

function renderDocuments() {
    documentList.innerHTML = documents.map(doc => `
        <div class="document-card ${doc.isImportant ? 'important' : ''}">
            <h3>${doc.name} ${doc.isLocked ? 'üîí' : ''} ${doc.isImportant ? '‚≠ê' : ''}</h3>
            <p>K√≠ch th∆∞·ªõc: ${formatSize(doc.size)}</p>
            <p>Ng√†y t·∫£i l√™n: ${doc.uploadDate}</p>
            <div class="actions">
                <button class="btn" onclick="viewDocument(${doc.id})" ${doc.isLocked ? 'disabled' : ''}>Xem</button>
                <button class="btn" onclick="downloadDocument(${doc.id})" ${doc.isLocked ? 'disabled' : ''}>T·∫£i xu·ªëng</button>
                <button class="menu-btn" onclick="toggleMenu(${doc.id})">...</button>
                <div class="menu-options" id="menu-${doc.id}">
                    <div class="menu-option" onclick="editDocument(${doc.id})">
                        <i>‚úèÔ∏è</i> S·ª≠a
                    </div>
                    <div class="menu-option" onclick="shareDocument(${doc.id})">
                        <i>üîó</i> Chia s·∫ª
                    </div>
                    <div class="menu-option" onclick="lockDocument(${doc.id})">
                        <i>üîí</i> ${doc.isLocked ? 'M·ªü kh√≥a' : 'Kh√≥a'}
                    </div>
                    <div class="menu-option" onclick="markImportant(${doc.id})">
                        <i>‚≠ê</i> ${doc.isImportant ? 'B·ªè ƒë√°nh d·∫•u' : 'ƒê√°nh d·∫•u'} quan tr·ªçng
                    </div>
                    <div class="menu-option" onclick="deleteDocument(${doc.id})">
                        <i>üóëÔ∏è</i> X√≥a
                    </div>
                </div>
            </div>
        </div>
    `).join('');
}


// X·ª≠ l√Ω menu t√πy ch·ªçn
window.toggleMenu = function(id) {
    const menu = document.getElementById(`menu-${id}`);
    // ƒê√≥ng t·∫•t c·∫£ c√°c menu kh√°c
    document.querySelectorAll('.menu-options').forEach(m => {
        if (m.id !== `menu-${id}`) {
            m.classList.remove('show');
        }
    });
    menu.classList.toggle('show');
}

// ƒê√≥ng menu khi click ra ngo√†i
document.addEventListener('click', (e) => {
    if (!e.target.matches('.menu-btn')) {
        document.querySelectorAll('.menu-options').forEach(menu => {
            menu.classList.remove('show');
        });
    }
});

// C√°c h√†m x·ª≠ l√Ω t√πy ch·ªçn menu
window.editDocument = function(id) {
    const doc = documents.find(d => d.id === id);
    if (!doc) return;
    
    const newName = prompt('Nh·∫≠p t√™n m·ªõi cho t√†i li·ªáu:', doc.name);
    if (newName && newName.trim() !== '') {
        doc.name = newName.trim();
        localStorage.setItem('documents', JSON.stringify(documents));
        renderDocuments();
    }
}

window.shareDocument = function(id) {
    const doc = documents.find(d => d.id === id);
    if (!doc) return;
    
    const shareLink = `${window.location.origin}/share?id=${id}`;
    navigator.clipboard.writeText(shareLink)
        .then(() => alert('ƒê√£ sao ch√©p li√™n k·∫øt chia s·∫ª v√†o clipboard!'))
        .catch(() => alert('Kh√¥ng th·ªÉ sao ch√©p li√™n k·∫øt!'));
}

window.lockDocument = function(id) {
    const doc = documents.find(d => d.id === id);
    if (!doc) return;
    
    if (doc.isLocked) {
        const password = prompt('Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ m·ªü kh√≥a t√†i li·ªáu:');
        if (password === doc.password) {
            doc.isLocked = false;
            doc.password = null;
            alert('ƒê√£ m·ªü kh√≥a t√†i li·ªáu!');
        } else {
            alert('M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!');
            return;
        }
    } else {
        const password = prompt('Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ kh√≥a t√†i li·ªáu:');
        if (password && password.trim() !== '') {
            doc.isLocked = true;
            doc.password = password;
            alert('ƒê√£ kh√≥a t√†i li·ªáu!');
        }
    }
    
    localStorage.setItem('documents', JSON.stringify(documents));
    renderDocuments();
}

window.markImportant = function(id) {
    const doc = documents.find(d => d.id === id);
    if (!doc) return;
    
    doc.isImportant = !doc.isImportant;
    localStorage.setItem('documents', JSON.stringify(documents));
    renderDocuments();
}

// T·∫£i xu·ªëng t√†i li·ªáu
window.downloadDocument = function(id) {
    const doc = documents.find(d => d.id === id);
    if (!doc) return;
    
    const link = document.createElement('a');
    link.href = doc.content;
    link.download = doc.name;
    link.click();
}

// X√≥a t√†i li·ªáu
window.deleteDocument = function(id) {
    documents = documents.filter(d => d.id !== id);
    localStorage.setItem('documents', JSON.stringify(documents));
    renderDocuments();
}

// Hi·ªÉn th·ªã t√†i li·ªáu khi trang ƒë∆∞·ª£c t·∫£i
renderDocuments();

// X·ª≠ l√Ω click v√†o avatar
document.getElementById('userAvatar').addEventListener('click', () => {
    window.location.href = './profile.html';
});

// ƒê·ªãnh d·∫°ng k√≠ch th∆∞·ªõc file
function formatSize(bytes) {
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 Byte';
    const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
    return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
}

// X·ª≠ l√Ω t√¨m ki·∫øm
const searchInput = document.getElementById('searchInput');
const searchBtn = document.getElementById('searchBtn');

// H√†m t√¨m ki·∫øm t√†i li·ªáu
function searchDocuments(keyword) {
    keyword = keyword.toLowerCase().trim();
    if (!keyword) {
        renderDocuments();
        return;
    }

    const filteredDocs = documents.filter(doc => 
        doc.name.toLowerCase().includes(keyword)
    );

    documentList.innerHTML = filteredDocs.length > 0 ? 
        filteredDocs.map(doc => `
            <div class="document-card ${doc.isImportant ? 'important' : ''}">
                <h3>${doc.name} ${doc.isLocked ? 'üîí' : ''} ${doc.isImportant ? '‚≠ê' : ''}</h3>
                <p>K√≠ch th∆∞·ªõc: ${formatSize(doc.size)}</p>
                <p>Ng√†y t·∫£i l√™n: ${doc.uploadDate}</p>
                <div class="actions">
                    <button class="btn" onclick="viewDocument(${doc.id})" ${doc.isLocked ? 'disabled' : ''}>Xem</button>
                    <button class="btn" onclick="downloadDocument(${doc.id})" ${doc.isLocked ? 'disabled' : ''}>T·∫£i xu·ªëng</button>
                    <button class="menu-btn" onclick="toggleMenu(${doc.id})">...</button>
                    <div class="menu-options" id="menu-${doc.id}">
                        <div class="menu-option" onclick="editDocument(${doc.id})">
                            <i>‚úèÔ∏è</i> S·ª≠a
                        </div>
                        <div class="menu-option" onclick="shareDocument(${doc.id})">
                            <i>üîó</i> Chia s·∫ª
                        </div>
                        <div class="menu-option" onclick="lockDocument(${doc.id})">
                            <i>üîí</i> ${doc.isLocked ? 'M·ªü kh√≥a' : 'Kh√≥a'}
                        </div>
                        <div class="menu-option" onclick="markImportant(${doc.id})">
                            <i>‚≠ê</i> ${doc.isImportant ? 'B·ªè ƒë√°nh d·∫•u' : 'ƒê√°nh d·∫•u'} quan tr·ªçng
                        </div>
                        <div class="menu-option" onclick="deleteDocument(${doc.id})">
                            <i>üóëÔ∏è</i> X√≥a
                        </div>
                    </div>
                </div>
            </div>
        `).join('') : 
        '<div class="no-results">Kh√¥ng t√¨m th·∫•y t√†i li·ªáu n√†o ph√π h·ª£p</div>';
}

// X·ª≠ l√Ω s·ª± ki·ªán nh·∫≠p li·ªáu trong √¥ t√¨m ki·∫øm
searchInput.addEventListener('input', () => {
    if (searchInput.value.trim() === '') {
        renderDocuments();
    }
});

// X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n Enter trong √¥ t√¨m ki·∫øm
searchInput.addEventListener('keyup', (e) => {
    if (e.key === 'Enter') {
        searchDocuments(searchInput.value);
    }
});

// X·ª≠ l√Ω s·ª± ki·ªán click n√∫t t√¨m ki·∫øm
searchBtn.addEventListener('click', () => {
    searchDocuments(searchInput.value);
});

document.querySelector('.compose-btn').addEventListener('click', () => {
    window.location.href = 'editor.html';
});
